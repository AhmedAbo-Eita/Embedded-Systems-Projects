
First_Porject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000392  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000406  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ace  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000710  00000000  00000000  00001022  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000657  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003db  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000042a  00000000  00000000  0000229b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000026c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  74:	0c 94 c7 01 	jmp	0x38e	; 0x38e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <app_init>:
#include "application.h"
uint8_t button;
void app_init()
{
	
	LED_init(PORT_C,0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	83 e4       	ldi	r24, 0x43	; 67
  80:	0e 94 62 00 	call	0xc4	; 0xc4 <LED_init>
	BUTTON_INIT(PORT_A,0);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 5b 00 	call	0xb6	; 0xb6 <BUTTON_INIT>
  8c:	08 95       	ret

0000008e <app_loop>:
}
void app_loop()
{
	BUTTON_READ(PORT_A,0,&button);
  8e:	40 e6       	ldi	r20, 0x60	; 96
  90:	50 e0       	ldi	r21, 0x00	; 0
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 5f 00 	call	0xbe	; 0xbe <BUTTON_READ>
	if(button == BUTTON_PRESSED)
  9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	29 f4       	brne	.+10     	; 0xac <app_loop+0x1e>
	{
		LED_ON(PORT_C,0);
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	83 e4       	ldi	r24, 0x43	; 67
  a6:	0e 94 66 00 	call	0xcc	; 0xcc <LED_ON>
  aa:	08 95       	ret
	}
	else
	{
		LED_OFF(PORT_C,0);
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	83 e4       	ldi	r24, 0x43	; 67
  b0:	0e 94 6a 00 	call	0xd4	; 0xd4 <LED_OFF>
  b4:	08 95       	ret

000000b6 <BUTTON_INIT>:

//initialization of button
void BUTTON_INIT(uint8_t portNumber,uint8_t pinNumber)
{
	//initialization the pin as input pin
	DIO_init(portNumber,pinNumber,IN);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_init>
  bc:	08 95       	ret

000000be <BUTTON_READ>:
}

//read value of button
void BUTTON_READ(uint8_t portNumber,uint8_t pinNumber,uint8_t* value)
{
	DIO_read(portNumber,pinNumber, value);
  be:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_read>
  c2:	08 95       	ret

000000c4 <LED_init>:

#include "led.h"

void LED_init(uint8_t portNumber, uint8_t pinNumber)// initialization of led
{
	DIO_init( portNumber,pinNumber,OUT);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	0e 94 73 00 	call	0xe6	; 0xe6 <DIO_init>
  ca:	08 95       	ret

000000cc <LED_ON>:
}

void LED_ON(uint8_t portNumber, uint8_t pinNumber)// LED OFF
{
	DIO_write( portNumber, pinNumber,HIGH);
  cc:	41 e0       	ldi	r20, 0x01	; 1
  ce:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_write>
  d2:	08 95       	ret

000000d4 <LED_OFF>:
}

void LED_OFF(uint8_t portNumber, uint8_t pinNumber) //LED ON
{
	DIO_write( portNumber, pinNumber,LOW);
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <DIO_write>
  da:	08 95       	ret

000000dc <main>:
 */ 

#include "Application/application.h"
int main(void)
{
    app_init();
  dc:	0e 94 3e 00 	call	0x7c	; 0x7c <app_init>
    while (1) 
    {
        app_loop();
  e0:	0e 94 47 00 	call	0x8e	; 0x8e <app_loop>
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <main+0x4>

000000e6 <DIO_init>:
		case(PORT_C):
		toggle(PORTC,pinNumber);
		break;
		//for port D
		case(PORT_D):
		toggle(PORTD,pinNumber);
  e6:	82 34       	cpi	r24, 0x42	; 66
  e8:	29 f1       	breq	.+74     	; 0x134 <DIO_init+0x4e>
  ea:	18 f4       	brcc	.+6      	; 0xf2 <DIO_init+0xc>
  ec:	81 34       	cpi	r24, 0x41	; 65
  ee:	39 f0       	breq	.+14     	; 0xfe <DIO_init+0x18>
  f0:	08 95       	ret
  f2:	83 34       	cpi	r24, 0x43	; 67
  f4:	d1 f1       	breq	.+116    	; 0x16a <DIO_init+0x84>
  f6:	84 34       	cpi	r24, 0x44	; 68
  f8:	09 f4       	brne	.+2      	; 0xfc <DIO_init+0x16>
  fa:	52 c0       	rjmp	.+164    	; 0x1a0 <DIO_init+0xba>
  fc:	08 95       	ret
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	59 f4       	brne	.+22     	; 0x118 <DIO_init+0x32>
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_init+0x28>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_init+0x24>
 112:	82 2b       	or	r24, r18
 114:	8a bb       	out	0x1a, r24	; 26
 116:	08 95       	ret
 118:	41 11       	cpse	r20, r1
 11a:	5c c0       	rjmp	.+184    	; 0x1d4 <DIO_init+0xee>
 11c:	2a b3       	in	r18, 0x1a	; 26
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_init+0x42>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_init+0x3e>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	8a bb       	out	0x1a, r24	; 26
 132:	08 95       	ret
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	59 f4       	brne	.+22     	; 0x14e <DIO_init+0x68>
 138:	27 b3       	in	r18, 0x17	; 23
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_init+0x5e>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_init+0x5a>
 148:	82 2b       	or	r24, r18
 14a:	87 bb       	out	0x17, r24	; 23
 14c:	08 95       	ret
 14e:	41 11       	cpse	r20, r1
 150:	41 c0       	rjmp	.+130    	; 0x1d4 <DIO_init+0xee>
 152:	27 b3       	in	r18, 0x17	; 23
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_init+0x78>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_init+0x74>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	87 bb       	out	0x17, r24	; 23
 168:	08 95       	ret
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	59 f4       	brne	.+22     	; 0x184 <DIO_init+0x9e>
 16e:	24 b3       	in	r18, 0x14	; 20
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_init+0x94>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_init+0x90>
 17e:	82 2b       	or	r24, r18
 180:	84 bb       	out	0x14, r24	; 20
 182:	08 95       	ret
 184:	41 11       	cpse	r20, r1
 186:	26 c0       	rjmp	.+76     	; 0x1d4 <DIO_init+0xee>
 188:	24 b3       	in	r18, 0x14	; 20
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_init+0xae>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_init+0xaa>
 198:	80 95       	com	r24
 19a:	82 23       	and	r24, r18
 19c:	84 bb       	out	0x14, r24	; 20
 19e:	08 95       	ret
 1a0:	41 30       	cpi	r20, 0x01	; 1
 1a2:	59 f4       	brne	.+22     	; 0x1ba <DIO_init+0xd4>
 1a4:	21 b3       	in	r18, 0x11	; 17
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_init+0xca>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_init+0xc6>
 1b4:	82 2b       	or	r24, r18
 1b6:	81 bb       	out	0x11, r24	; 17
 1b8:	08 95       	ret
 1ba:	41 11       	cpse	r20, r1
 1bc:	0b c0       	rjmp	.+22     	; 0x1d4 <DIO_init+0xee>
 1be:	21 b3       	in	r18, 0x11	; 17
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_init+0xe4>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_init+0xe0>
 1ce:	80 95       	com	r24
 1d0:	82 23       	and	r24, r18
 1d2:	81 bb       	out	0x11, r24	; 17
 1d4:	08 95       	ret

000001d6 <DIO_write>:
 1d6:	82 34       	cpi	r24, 0x42	; 66
 1d8:	29 f1       	breq	.+74     	; 0x224 <DIO_write+0x4e>
 1da:	18 f4       	brcc	.+6      	; 0x1e2 <DIO_write+0xc>
 1dc:	81 34       	cpi	r24, 0x41	; 65
 1de:	39 f0       	breq	.+14     	; 0x1ee <DIO_write+0x18>
 1e0:	08 95       	ret
 1e2:	83 34       	cpi	r24, 0x43	; 67
 1e4:	d1 f1       	breq	.+116    	; 0x25a <DIO_write+0x84>
 1e6:	84 34       	cpi	r24, 0x44	; 68
 1e8:	09 f4       	brne	.+2      	; 0x1ec <DIO_write+0x16>
 1ea:	52 c0       	rjmp	.+164    	; 0x290 <DIO_write+0xba>
 1ec:	08 95       	ret
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	59 f4       	brne	.+22     	; 0x208 <DIO_write+0x32>
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_write+0x28>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_write+0x24>
 202:	82 2b       	or	r24, r18
 204:	8b bb       	out	0x1b, r24	; 27
 206:	08 95       	ret
 208:	41 11       	cpse	r20, r1
 20a:	5c c0       	rjmp	.+184    	; 0x2c4 <DIO_write+0xee>
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_write+0x42>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_write+0x3e>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	8b bb       	out	0x1b, r24	; 27
 222:	08 95       	ret
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	59 f4       	brne	.+22     	; 0x23e <DIO_write+0x68>
 228:	28 b3       	in	r18, 0x18	; 24
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_write+0x5e>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_write+0x5a>
 238:	82 2b       	or	r24, r18
 23a:	88 bb       	out	0x18, r24	; 24
 23c:	08 95       	ret
 23e:	41 11       	cpse	r20, r1
 240:	41 c0       	rjmp	.+130    	; 0x2c4 <DIO_write+0xee>
 242:	28 b3       	in	r18, 0x18	; 24
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_write+0x78>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_write+0x74>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	88 bb       	out	0x18, r24	; 24
 258:	08 95       	ret
 25a:	41 30       	cpi	r20, 0x01	; 1
 25c:	59 f4       	brne	.+22     	; 0x274 <DIO_write+0x9e>
 25e:	25 b3       	in	r18, 0x15	; 21
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_write+0x94>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_write+0x90>
 26e:	82 2b       	or	r24, r18
 270:	85 bb       	out	0x15, r24	; 21
 272:	08 95       	ret
 274:	41 11       	cpse	r20, r1
 276:	26 c0       	rjmp	.+76     	; 0x2c4 <DIO_write+0xee>
 278:	25 b3       	in	r18, 0x15	; 21
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_write+0xae>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_write+0xaa>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	85 bb       	out	0x15, r24	; 21
 28e:	08 95       	ret
 290:	41 30       	cpi	r20, 0x01	; 1
 292:	59 f4       	brne	.+22     	; 0x2aa <DIO_write+0xd4>
 294:	22 b3       	in	r18, 0x12	; 18
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_write+0xca>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_write+0xc6>
 2a4:	82 2b       	or	r24, r18
 2a6:	82 bb       	out	0x12, r24	; 18
 2a8:	08 95       	ret
 2aa:	41 11       	cpse	r20, r1
 2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <DIO_write+0xee>
 2ae:	22 b3       	in	r18, 0x12	; 18
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_write+0xe4>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_write+0xe0>
 2be:	80 95       	com	r24
 2c0:	82 23       	and	r24, r18
 2c2:	82 bb       	out	0x12, r24	; 18
 2c4:	08 95       	ret

000002c6 <DIO_read>:
	}
}
void DIO_read(uint8_t portNumber,uint8_t pinNumber,uint8_t* value )//read dio
{
	//for port A
	switch (portNumber)
 2c6:	82 34       	cpi	r24, 0x42	; 66
 2c8:	01 f1       	breq	.+64     	; 0x30a <DIO_read+0x44>
 2ca:	18 f4       	brcc	.+6      	; 0x2d2 <DIO_read+0xc>
 2cc:	81 34       	cpi	r24, 0x41	; 65
 2ce:	39 f0       	breq	.+14     	; 0x2de <DIO_read+0x18>
 2d0:	08 95       	ret
 2d2:	83 34       	cpi	r24, 0x43	; 67
 2d4:	81 f1       	breq	.+96     	; 0x336 <DIO_read+0x70>
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_read+0x16>
 2da:	43 c0       	rjmp	.+134    	; 0x362 <DIO_read+0x9c>
 2dc:	08 95       	ret
	{
		case(PORT_A):
		//read the value in PINx register for specific pin and shift it to get value 1 or 0
		*value = (PINA & (1<<pinNumber))>>pinNumber;
 2de:	79 b3       	in	r23, 0x19	; 25
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	9c 01       	movw	r18, r24
 2e6:	06 2e       	mov	r0, r22
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_read+0x28>
 2ea:	22 0f       	add	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_read+0x24>
 2f2:	87 2f       	mov	r24, r23
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	82 23       	and	r24, r18
 2f8:	93 23       	and	r25, r19
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_read+0x3a>
 2fc:	95 95       	asr	r25
 2fe:	87 95       	ror	r24
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_read+0x36>
 304:	fa 01       	movw	r30, r20
 306:	80 83       	st	Z, r24
		break;
 308:	08 95       	ret
		//for port B
		case(PORT_B):
		*value = (PINB & (1<<pinNumber))>>pinNumber;
 30a:	76 b3       	in	r23, 0x16	; 22
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	9c 01       	movw	r18, r24
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_read+0x54>
 316:	22 0f       	add	r18, r18
 318:	33 1f       	adc	r19, r19
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_read+0x50>
 31e:	87 2f       	mov	r24, r23
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	82 23       	and	r24, r18
 324:	93 23       	and	r25, r19
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_read+0x66>
 328:	95 95       	asr	r25
 32a:	87 95       	ror	r24
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_read+0x62>
 330:	fa 01       	movw	r30, r20
 332:	80 83       	st	Z, r24
		break;
 334:	08 95       	ret
		//for port C
		case(PORT_C):
		*value = (PINC & (1<<pinNumber))>>pinNumber;
 336:	73 b3       	in	r23, 0x13	; 19
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	9c 01       	movw	r18, r24
 33e:	06 2e       	mov	r0, r22
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_read+0x80>
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_read+0x7c>
 34a:	87 2f       	mov	r24, r23
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	82 23       	and	r24, r18
 350:	93 23       	and	r25, r19
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_read+0x92>
 354:	95 95       	asr	r25
 356:	87 95       	ror	r24
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_read+0x8e>
 35c:	fa 01       	movw	r30, r20
 35e:	80 83       	st	Z, r24
		break;
 360:	08 95       	ret
		//for port D
		case(PORT_D):
		*value = (PIND & (1<<pinNumber))>>pinNumber;
 362:	70 b3       	in	r23, 0x10	; 16
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	9c 01       	movw	r18, r24
 36a:	06 2e       	mov	r0, r22
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_read+0xac>
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_read+0xa8>
 376:	87 2f       	mov	r24, r23
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	82 23       	and	r24, r18
 37c:	93 23       	and	r25, r19
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_read+0xbe>
 380:	95 95       	asr	r25
 382:	87 95       	ror	r24
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_read+0xba>
 388:	fa 01       	movw	r30, r20
 38a:	80 83       	st	Z, r24
 38c:	08 95       	ret

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
